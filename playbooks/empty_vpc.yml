---
- name: this Ansible Playbook will terminate empty VPCs
  hosts: localhost
  gather_facts: false
  vars:
    ec2_region: "{{ your_region | default('us-east-1') }}"
    filter_tag: "{{ your_tag | default('*tqe*')}}"
  tasks:
    - amazon.aws.ec2_vpc_net_info:
        region: "{{ ec2_region }}"
        filters:
          "tag:Name": "{{ filter_tag }}"
      register: all_vpcs

    - name: grab info instances in VPCs
      amazon.aws.ec2_instance_info:
        region: "{{ ec2_region }}"
        filters:
          vpc-id: "{{ item.vpc_id }}"
      register: ec2_node_info
      loop: '{{ all_vpcs.vpcs }}'

    - name: diplay AWS missing tag results
      debug:
        msg: "{{ lookup('template', 'templates/vpc_instances.j2') }}"

    - name: Gather information about all eni
      amazon.aws.ec2_eni_info:
        region: "{{ ec2_region }}"
        filters:
          vpc-id: "{{ item.item.vpc_id }}"
      loop: "{{ ec2_node_info.results }}"
      register: all_eni
      when: item.instances | length == 0

    - name: Delete dangling ENIs from for {{ ec2_name_prefix }}-vpc
      amazon.aws.ec2_eni:
        region: "{{ ec2_region }}"
        eni_id: "{{item.1['id']}}"
        state: absent
      with_subelements:
        - "{{ all_eni.results }}"
        - network_interfaces

    - name: Gather information about all security groups
      amazon.aws.ec2_group_info:
        region: "{{ ec2_region }}"
        filters:
          vpc-id: "{{ item.item.vpc_id }}"
      loop: "{{ ec2_node_info.results }}"
      register: all_sg
      when: item.instances | length == 0

    # - name: debug list all sg for empty VPCs
    #   debug:
    #     msg: "{{ all_sg | to_nice_yaml }}"

    - name: "Delete group by its id"
      amazon.aws.ec2_group:
        region: "{{ ec2_region }}"
        group_id: "{{ item.1.group_id }}"
        state: absent
      with_subelements:
        - "{{ all_sg.results }}"
        - security_groups
      when: item.1.group_name != "default"

    - name: find all subnets associated with VPC
      amazon.aws.ec2_vpc_subnet_info:
        region: "{{ ec2_region }}"
        filters:
          vpc-id: "{{ item.item.vpc_id }}"
      loop: "{{ ec2_node_info.results }}"
      register: all_subnets
      when: item.instances | length == 0

    - name: Delete subnets
      ec2_vpc_subnet:
        region: "{{ ec2_region }}"
        vpc_id: "{{ item.1.vpc_id }}"
        cidr: "{{ item.1.cidr_block }}"
        state: absent
      with_subelements:
        - "{{ all_subnets.results }}"
        - subnets

    - name: "Delete internet gateway"
      ec2_vpc_igw:
        region: "{{ ec2_region }}"
        vpc_id: "{{ item.item.vpc_id }}"
        state: "absent"
      loop: "{{ ec2_node_info.results }}"
      when: item.instances | length == 0

    - name: grab route information for {{ ec2_name_prefix }} on {{ ec2_region }}
      amazon.aws.ec2_vpc_route_table_info:
        region: "{{ ec2_region }}"
        filters:
          vpc-id: "{{ item.item.vpc_id }}"
      loop: "{{ ec2_node_info.results }}"
      register: all_route_table
      when: item.instances | length == 0

    - name: debug route table
      debug:
        msg: "{{ all_route_table | to_nice_yaml }}"

    - name: vpc public subnet route table is deleted
      amazon.aws.ec2_vpc_route_table:
        region: "{{ ec2_region }}"
        route_table_id: "{{item.1.id}}"
        lookup: id
        vpc_id: "{{ item.1.vpc_id }}"
        state: absent
      with_subelements:
        - "{{ all_route_table.results }}"
        - route_tables
      when: item.1.associations | length == 0 or not item.1.associations[0].main

    - name: delete AWS VPC
      ec2_vpc_net:
        name: "{{ item.item.tags.Name }}"
        cidr_block: "{{ item.item.cidr_block }}"
        region: "{{ ec2_region }}"
        state: absent
      loop: "{{ ec2_node_info.results }}"
      when: item.instances | length == 0
